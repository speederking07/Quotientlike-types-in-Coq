CoInductive delayed (A : Type) := Delayed {
  state : A + delayed A
}.

Arguments Delayed {A}.
Arguments state {A} _.

Definition delayed_val {A : Type} (x: A) := Delayed (inl x).
Definition delayed_del {A : Type} (x: delayed A) := Delayed (inr x).

CoFixpoint map {A B: Type} (f : A -> B) (x : delayed A) : delayed B :=
{|
  state :=
    match state x with
    | inl a => inl (f a)
    | inr x' => inr (map f x')
    end
|}.

Definition pure {A : Type} (v: A) := delayed_val v.

CoFixpoint bind {A B : Type} (x : delayed A) (f : A -> delayed B) : delayed B :=
{|
  state :=
    match state x with
    | inl a => state (f a)
    | inr x' => inr (bind x' f)
    end
|}.

CoFixpoint constDelayed {A: Type} (x: A) (t: nat) : delayed A :=
  match t with
  | O => delayed_val x
  | S t' => delayed_del (constDelayed x t')
  end.

Definition id {A: Type} (x: A) := x.

Lemma eq_delayed : forall {A : Type} (x y : delayed A), state x = state y -> x = y.
Proof.
  now intros A [] []; cbn; intros [].
Qed.

Inductive SimF {A: Type} (x y : delayed A) (R: delayed A -> delayed A -> Prop) : Prop :=
| SimF_val : forall (v : A), state x = inl v -> state y = inl v ->
   SimF x y R
| SimF_del : forall (x' y' : delayed A), state x = inr x' -> state y = inr y' ->
   R x' y' -> SimF x y R.

CoInductive Sim {A: Type} (x y: delayed A) : Prop := {
  out : SimF x y Sim
}.

Axiom delayed_eq : forall (A: Type) (x y : delayed A), Sim x y -> x = y. 

Lemma map_id (A: Type) (x: delayed A) : (map id x) = x.
Proof.
  apply delayed_eq. revert A x. cofix CH. destruct x as [[v | d]].
  - constructor. apply SimF_val with (v0 := v); auto.
  - constructor. apply SimF_del with (x' := (map id d)) (y' :=  d); auto.
Qed.

Definition dot {A B C: Type} (f : B -> C) (g: A -> B) (x: A) := f (g x).
Notation "f (.) g" := (dot f g) (at level 75). 

Lemma map_comp (A B C: Type) (f : B -> C) (g: A -> B) (x: delayed A) : 
  (map (f (.) g) x) = (map f (map g x)).
Proof.
  apply delayed_eq. revert A B C f g x. cofix CH. destruct x as [[v | d]].
  - constructor. apply SimF_val with (v0 := (f (g v))); auto.
  - constructor. apply SimF_del with (x' := (map (f (.) g) d)) (y' := (map f (map g d))); auto. 
Qed.

Lemma left_id_bind (A B : Type) (f: A -> delayed B) (x: A) : 
  (bind (pure x) f) = (f x).
Proof.
  apply delayed_eq.
  destruct (f x) as [[b | d]] eqn: Heq.
  - econstructor. rewrite <- Heq. ; [rewrite Heq |].
  - econstructor 2; cbn; [now rewrite Heq | easy |].
    apply Sim_refl.
Qed.

Lemma right_id_bind (A B : Type) (x: delayed A) : 
  (bind x pure) = x.
Proof.
  apply delayed_eq. revert A x. cofix CH. destruct x as [[v | d]].
  - constructor. apply SimF_val with (v0 := v); auto.
  - constructor. apply SimF_del with (x' := (bind d pure)) (y' :=  d); auto.
Qed.

Lemma bind_comp (A B C: Type) (f : B -> delayed C) (g: A -> delayed B) (x: delayed A) : 
  (bind (bind x g) f) = (bind x (fun y => bind (g y) f)).
Proof.
  apply delayed_eq. revert A B C f g x. cofix CH. destruct x as [[v | d]].
  - constructor. apply SimF_val with (v0 := (bind (g v) f)). exists (f (g v)). unfold dot. cbn. split; auto.
  - constructor. right. cbn. exists (map (f (.) g) d), (map f (map g d)).
    split; cycle 1. split; auto. apply CH.
Qed.

  

