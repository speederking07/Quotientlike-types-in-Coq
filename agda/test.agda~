{-# OPTIONS --cubical #-}

data Nat : Set where
    zero : Nat
    suc : Nat -> Nat

data List (A : Set) : Set where
  []  : List A
  _∷_ : A → List A → List A

data Bag (X: Set) : Set where
  [] : Bag X
  _::_ : X -> Bag X -> Bag X
  swap : (x y: X) (z : Bag X) -> x :: y :: z ≡ y :: x :: z

_+_ : Nat -> Nat -> Nat
zero + y = y
(suc x) + y = suc (x + y)

half : Nat -> Nat
half zero              = zero
half (suc zero)     = zero
half (suc (suc n)) = suc (half n)


